# -*- coding: utf-8 -*-
"""–±–æ—Ç –≤–∞–≤–∏–ª–æ–Ω

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-hpJ9DdsCoA4NL1qJIPV72SoXRJhrFe
"""

import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
DATE, PHONE, PARENT_NAME, GIRL_NAME, AGE, EXPERIENCE, SOURCE = range(7)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
user_data_db = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –ë–∞–∑–æ–≤—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub —Å —Ñ–æ—Ç–æ
GITHUB_REPO_URL = "https://raw.githubusercontent.com/syakimmm/vavilon/main/"

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
PHOTO_URLS = {
    'about1': f"https://raw.githubusercontent.com/syakimmm/vavilon/main/166979-chelovek_pauk_net_dorogi_domoj-chelovek_pauk-kinovselennaya_marvel-studiya_marvel-mir-3840x2160.jpg",
    'about2': f"https://raw.githubusercontent.com/syakimmm/vavilon/main/166979-chelovek_pauk_net_dorogi_domoj-chelovek_pauk-kinovselennaya_marvel-studiya_marvel-mir-3840x2160.jpg",
    'requirements1': f"https://raw.githubusercontent.com/syakimmm/vavilon/main/166979-chelovek_pauk_net_dorogi_domoj-chelovek_pauk-kinovselennaya_marvel-studiya_marvel-mir-3840x2160.jpg",
    'requirements2': f"https://raw.githubusercontent.com/syakimmm/vavilon/main/166979-chelovek_pauk_net_dorogi_domoj-chelovek_pauk-kinovselennaya_marvel-studiya_marvel-mir-3840x2160.jpg"
}

async def download_photo(url: str) -> BytesIO:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏–∑ GitHub"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return BytesIO(response.content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        raise

async def send_photo_album(chat_id: int, photo_keys: list, caption: str = "", context: CallbackContext = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ —Ñ–æ—Ç–æ –∏–∑ GitHub"""
    try:
        media_group = []
        for i, key in enumerate(photo_keys):
            photo = await download_photo(PHOTO_URLS[key])
            media_group.append(InputMediaPhoto(
                media=photo,
                caption=caption if i == 0 else ""
            ))

        await context.bot.send_media_group(
            chat_id=chat_id,
            media=media_group
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return False

async def start(update: Update, context: CallbackContext) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="signup")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton("üéí –ß—Ç–æ –≤–∑—è—Ç—å", callback_data="requirements")],
        [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")],
        [
            InlineKeyboardButton("üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="program"),
            InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å", callback_data="location")
        ],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]

    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è. ü©∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def about(update: Update, context: CallbackContext) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–∏–∏ —Å —Ñ–æ—Ç–æ –∏–∑ GitHub"""
    query = update.callback_query
    await query.answer()

    success = await send_photo_album(
        chat_id=query.message.chat_id,
        photo_keys=['about1', 'about2'],
        caption="üåü –û –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏:\n\n–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ–¥–∞–≥–æ–≥–∏\n–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–µ –∑–∞–ª—ã\n10 –ª–µ—Ç –æ–ø—ã—Ç–∞",
        context=context
    )

    if not success:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–∏–∏.")

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

async def requirements(update: Update, context: CallbackContext) -> None:
    """–ß—Ç–æ –≤–∑—è—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è —Å —Ñ–æ—Ç–æ –∏–∑ GitHub"""
    query = update.callback_query
    await query.answer()

    success = await send_photo_album(
        chat_id=query.message.chat_id,
        photo_keys=['requirements1', 'requirements2'],
        caption="üéí –ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π:\n\n‚Ä¢ –§–æ—Ä–º—É –¥–ª—è —Ç–∞–Ω—Ü–µ–≤\n‚Ä¢ –ß–µ—à–∫–∏/–±–∞–ª–µ—Ç–∫–∏\n‚Ä¢ –ë—É—Ç—ã–ª–∫—É –≤–æ–¥—ã",
        context=context
    )

    if not success:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö.")

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

async def back_to_menu(update: Update, context: CallbackContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await start(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(about, pattern='^about$'))
    application.add_handler(CallbackQueryHandler(requirements, pattern='^requirements$'))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–æ—Ç–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        for url in PHOTO_URLS.values():
            requests.head(url, timeout=5)
        logger.info("–í—Å–µ —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–æ—Ç–æ: {e}")

    main()