import os
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
DATE, PHONE, PARENT_NAME, GIRL_NAME, AGE, EXPERIENCE, SOURCE = range(7)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ë–î)
user_data_db = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è. ü©∞\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/signup - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/my_lesson - –ú–æ—è –∑–∞–ø–∏—Å—å\n"
        "/cancel - –û—Ç–º–µ–Ω–∞\n"
        "/program - –ü—Ä–æ–≥—Ä–∞–º–º–∞\n"
        "/requirements - –ß—Ç–æ –≤–∑—è—Ç—å\n"
        "/location - –ê–¥—Ä–µ—Å\n"
        "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç—ã"
    )

async def signup(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("22.05.2025 –≤ 11:00", callback_data="date_2025-05-22_11:00")],
        [InlineKeyboardButton("25.05.2025 –≤ 14:00", callback_data="date_2025-05-25_14:00")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return DATE

async def date_choice(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    date, time = query.data.split('_')[1], query.data.split('_')[2]
    context.user_data['date'] = f"{date} {time}"
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {date} {time}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return PHONE

# ========== –¶–ï–ü–û–ß–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ==========

async def phone_input(update: Update, context: CallbackContext) -> int:
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è:")
    return PARENT_NAME

async def parent_name_input(update: Update, context: CallbackContext) -> int:
    context.user_data['parent_name'] = update.message.text
    await update.message.reply_text("–ò–º—è —Ä–µ–±–µ–Ω–∫–∞:")
    return GIRL_NAME

async def girl_name_input(update: Update, context: CallbackContext) -> int:
    context.user_data['girl_name'] = update.message.text
    await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:")
    return AGE

async def age_input(update: Update, context: CallbackContext) -> int:
    context.user_data['age'] = update.message.text
    await update.message.reply_text("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç:")
    return EXPERIENCE

async def experience_input(update: Update, context: CallbackContext) -> int:
    context.user_data['experience'] = update.message.text
    await update.message.reply_text("–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?")
    return SOURCE

async def source_input(update: Update, context: CallbackContext) -> int:
    context.user_data['source'] = update.message.text
    user_id = update.message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data_db[user_id] = context.user_data
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n{context.user_data}"
    )
    
    await update.message.reply_text(
        "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
        f"–î–∞—Ç–∞: {context.user_data['date']}\n"
        "–ñ–¥–µ–º –≤–∞—Å!"
    )
    return ConversationHandler.END

# ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

async def my_lesson(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if record := user_data_db.get(user_id):
        await update.message.reply_text(
            f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
            f"üìÖ {record['date']}\n"
            f"üëß {record['girl_name']}, {record['age']} –ª–µ—Ç"
        )
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã")

async def cancel_lesson(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id in user_data_db:
        del user_data_db[user_id]
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

async def cancel_conversation(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# ========== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

async def program(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–Ω—è—Ç–∏–π:\n"
        "1. –†–∞–∑–º–∏–Ω–∫–∞\n2. –•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è\n3. –†–∞—Å—Ç—è–∂–∫–∞"
    )

async def requirements(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π:\n"
        "- –§–æ—Ä–º—É –¥–ª—è –∑–∞–Ω—è—Ç–∏–π\n"
        "- –í–æ–¥—É\n"
        "- –°–º–µ–Ω–Ω—É—é –æ–±—É–≤—å"
    )

async def location(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üìç –ê–¥—Ä–µ—Å:\n"
        "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è, 15\n"
        "–°—Ç—É–¥–∏—è Vavilon Dance"
    )

async def contacts(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "–ê–Ω–Ω–∞: +7 (999) 123-45-67\n"
        "–ú–∞—Ä–∏—è: +7 (999) 765-43-21"
    )

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('signup', signup)],
        states={
            DATE: [CallbackQueryHandler(date_choice, pattern='^date_')],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_input)],
            PARENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, parent_name_input)],
            GIRL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, girl_name_input)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_input)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, experience_input)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, source_input)],
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('my_lesson', my_lesson))
    application.add_handler(CommandHandler('cancel', cancel_lesson))
    application.add_handler(CommandHandler('program', program))
    application.add_handler(CommandHandler('requirements', requirements))
    application.add_handler(CommandHandler('location', location))
    application.add_handler(CommandHandler('contacts', contacts))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()